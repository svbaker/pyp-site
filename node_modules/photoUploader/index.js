var fs = require('fs');
var mysql = require('mysql');
var Hashids = require("hashids"),
	hashids = new Hashids("bbatpyp12345", 4, 'abcdefghijklmnopqrstuvwxyz123456789'); // Salt, min length of hash, alphabet

var sendMail   = require("sendMail");
var gm = require('gm');

// Generate short hash keys from a positive integer so users can key them easily
genKey = function (inInt) {
	return hashids.encrypt(inInt);
};

// Get client IP address ----------------------
getClientAddress = function (req) {
		return (req.headers['x-forwarded-for'] || '').split(',')[0] 
				|| req.connection.remoteAddress;
};


uploadPhoto = function (env_settings) {

	return function uploadPhoto(req, res, next) {

		var userPhotosArray = [];
		var uploadedFilesArray = [];

		if ('/uploadPhoto' == req.url) {

			if (Array.isArray(req.files.userPhoto)) {
				userPhotosArray = req.files.userPhoto;
			} else {
				userPhotosArray.push(req.files.userPhoto);
			}

			if (userPhotosArray.length > 5) {
				res.end(JSON.stringify({
					error: 'You can only load up to 5 images.'
				}));
				return;
			}

			// Call recursive function to process all files in array
			processFiles(userPhotosArray, uploadedFilesArray);

		} else {
			next();
		}


		function processFiles(filesArray, uploadedFilesArray) {

			var thisArray, serverPath, pathToServer, userFilename, file_ext, sql, hash, dbid;
			var dt = new Date();
			var connectionInfo = env_settings.dbConnSettings;
			var connection;

			if (filesArray.length > 0) {
				thisArray = filesArray.shift();

				userFilename = thisArray.name;
				serverPath = '/images/uploads/';

				pathToServer = env_settings.webroot_path;

				file_ext = userFilename.split('.').pop();
				console.log('Processing file ' + userFilename + ' with extension ' + file_ext);

				connection = mysql.createConnection(connectionInfo);

				sql = 'INSERT INTO photo_uploads (';
				sql += 'user_filename,';
				sql += 'file_ext,';
				sql += 'upload_date,';
				sql += 'upload_status) values (';
				sql += connection.escape(userFilename) + ',';
				sql += connection.escape(file_ext) + ',';
				sql += connection.escape(dt) + ',';
				sql += "'P')";

				console.log(sql);

				connection.query(sql, function(err, result) {
					if (err) throw err;

					hash = genKey(result.insertId);
					dbid = result.insertId;
					console.log('Insert complete - new id is ' + result.insertId + ' and hash is ' + hash);

					fs.rename(
					thisArray.path,
					pathToServer + serverPath + hash + '.' + file_ext,
					function(error) {
						if (error) {
							console.log(error);
							res.end(JSON.stringify({
								error: 'File uploaded cancelled, server error: ' + error
							}));
							return;
						}

						// Create Thumbnail
						var largeImageFile = pathToServer + serverPath + hash + '.' + file_ext;
						var smallImageFile = pathToServer + serverPath + hash + '_thumb.' + file_ext;

						var thumbSize = {width: 87, height: 68};
						var aspect, resizeHeight, resizeWidth;

						// Get uploaded image size
						gm(largeImageFile)
							.size(function (err, size) {
							if (err) throw err;

							// Resize to keep largest dimmension
							aspect = (size.width > size.height ? 'wider' : 'taller');

							if (aspect == 'wider') {
								resizeHeight = thumbSize.height;
								resizeWidth = Math.round(thumbSize.height * (size.width / size.height));
							} else {
								resizeWidth = thumbSize.width;
								resizeHeight = Math.round(thumbSize.width * (size.height / size.width));
							}

							// Resize image, trim to thumbnail aspect ratio, write to disk
							gm(largeImageFile)
							.resize(resizeWidth, resizeHeight)
							.gravity('Center')
							.extent(thumbSize.width, thumbSize.height)
							.write(smallImageFile, function (error) {
								if (err) throw err;

								sql = "UPDATE photo_uploads SET hash = " + connection.escape(hash) + ",";
								sql += "web_path = " + connection.escape(serverPath + hash + '.' + file_ext) + " ";
								sql += "WHERE id = " + result.insertId;

								console.log(sql);

								connection.query(sql, function(err, result) {
									if (err) throw err;

									uploadedFilesArray.push({
									img_path: serverPath + hash + '.' + file_ext,
									img_thumb_path: serverPath + hash + '_thumb.' + file_ext,
									id: dbid
									});

									processFiles(filesArray, uploadedFilesArray);

								});

							});

						});

					});

				});


			} else {
				// All files complete
				console.log('Done all files in array');
				console.log(JSON.stringify(uploadedFilesArray));

				res.end(JSON.stringify({
					fileList: uploadedFilesArray
				}));
				return;
			}
				
		}

	};
};



uploadPhotosForm = function (env_settings) {

	return function uploadPhotosForm(req, res, next) {

		var body = '';
		var formdata;
		var post_id;
		var delim = '';

		if ('/uploadPhotosForm' == req.url) {

			// Build body string that contains the entire message body
			req.on('data', function(chunk) {
				body += chunk;
			});
			
			// When message body has completely loaded
			req.on('end', function() {
				console.log('Body is: ' + body)

				try {
					formdata = JSON.parse(body);
				} catch(err) {
					res.end(JSON.stringify({status: 'error', status_detail: 'Error parsing JSON'}));
				}

				// Get client info
				var client_ip = getClientAddress(req);
				var client_agent = req.headers['user-agent'];


				// Process form data to database
				var connectionInfo = env_settings.dbConnSettings;
				var connection;
				connection = mysql.createConnection(connectionInfo);
				var dt = new Date();

				var isql, vsql, sql;

				isql = 'INSERT INTO posts (';
				vsql = ' VALUES ('

				isql += 'breed_id,';
				vsql += connection.escape(parseInt(formdata.breed_id)) + ',';

				isql += 'full_name,';
				vsql += connection.escape(formdata.full_name) + ',';

				isql += 'farm_name,';
				vsql += connection.escape(formdata.farm_name) + ',';

				isql += 'mailing_address,';
				vsql += connection.escape(formdata.mailing_address) + ',';

				isql += 'email,';
				vsql += connection.escape(formdata.email) + ',';

				isql += 'email_optin,';
				vsql += connection.escape(formdata.email_optin) + ',';

				isql += 'website,';
				vsql += connection.escape(formdata.website) + ',';

				isql += 'photo_credit,';
				vsql += connection.escape(formdata.photo_credit) + ',';

				isql += 'breed_description,';
				vsql += connection.escape(formdata.breed_description) + ',';

				isql += 'breed_personality,';
				vsql += connection.escape(formdata.breed_personality) + ',';

				isql += 'breedvalue_eggs,';
				vsql += connection.escape(formdata.breedvalue_eggs) + ',';
				isql += 'breedvalue_meat,';
				vsql += connection.escape(formdata.breedvalue_meat) + ',';
				isql += 'breedvalue_dual,';
				vsql += connection.escape(formdata.breedvalue_dual) + ',';
				isql += 'breedvalue_pet,';
				vsql += connection.escape(formdata.breedvalue_pet) + ',';
				isql += 'breedvalue_looks,';
				vsql += connection.escape(formdata.breedvalue_looks) + ',';

				isql += 'post_date,';
				vsql += connection.escape(dt) + ',';

				isql += 'ip,';
				vsql += connection.escape(client_ip) + ',';

				isql += 'agent,';
				vsql += connection.escape(client_agent) + ',';

				isql += 'status) ';
				vsql += connection.escape('P') + ')';

				sql = isql + vsql;

				console.log(sql);

				connection.query(sql, function(err, result) {

					if (err) throw err;

					post_id = result.insertId;

					// Update photo records with associated post id
					sql = "UPDATE photo_uploads SET post_id = " + post_id + ", upload_status = 'C' "
					sql += "WHERE id IN ("

					for (var i=0; i < formdata.photo_ids.length; i++) {
						sql += delim + formdata.photo_ids[i];
						delim = ','
					}

					sql += ')'

					console.log(sql);

					connection.query(sql, function(err, result) {
						var email_msg;
						if (err) throw err;

						// Send confirmation email - in produciton only
						if (env_settings.env_mode == 'PROD') {

							email_msg = 'Your photos have been submited!\n\n';
							email_msg += 'Thank you for sharing your photos. If your bird is featured in our photo album or we use any of your comments, we will send you an "I Pamper My Poultry" bumper sticker and will credit you and your bird in our directory.\n\n';
							email_msg += 'Julie and Bridget Baker\n';
							email_msg += 'Pampered Poultry\n';
							email_msg += 'julie@pamperyourpoultry.com\n';

							console.log('Sending email to ' + formdata.email);

							sendMail.sendEmail(
								{
									msg: email_msg,
									from: 'Julie <julie@pamperyourpoultry.com>',
									to: formdata.full_name + ' <' + formdata.email + '>',
									subject: 'Thank you for uploading your photos'
								},
								env_settings.emailSettings,
								function (err) {
									if (err) {
										// Log any email errors for reference
										console.log(JSON.stringify(err));
									}
								}
							);
						}

						res.end(JSON.stringify({status: 'ok', status_detail: ''}));
						return;
					});

					console.log('End db connection');
					connection.end();

				});


			});
			

		} else {
			next();
		}

	}
}



/* Expose public functions ------ */
exports.uploadPhoto = uploadPhoto;
exports.uploadPhotosForm = uploadPhotosForm;



