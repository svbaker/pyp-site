var sendMail   = require("sendMail");
var errtrack = require('errtrack');
var encryption = require("encryption");

// Get client IP address ----------------------
getClientAddress = function (req) {
	return (req.headers['x-forwarded-for'] || '').split(',')[0] 
		|| req.connection.remoteAddress;
};

ajaxHandlers = function (env_settings) {

	return function ajaxHandlers(req, res, next) {

		var body = '';
		var pair, params, sql, post_data;
		var PARAM_cat_code;
		var notification_email = env_settings.notification_email;
		var logSQL = env_settings.logSQL;

		// Pass to next Connect module if URL is not a site handler url
		if (req.url.length > 9) {
			if (req.url.toLowerCase().substring(0, 11) != '/site/ajax/') {
				next();
				return;
			}
		} else {
			next();
			return;
		}

		// Set up general variables
		var dt = new Date();
		var connection;
		var client_ip = getClientAddress(req);

		// Build body string that contains the entire message body
		req.on('data', function(chunk) {
			body += chunk;
		});

		req.on('end', function() {
			if (body) {

				// Handlers that take JSON, not form data
				if (('/site/ajax/post_order' == req.url.toLowerCase()) ||
					('/site/ajax/updatecart_onhand' == req.url.toLowerCase()))
				 {

					try {
						post_data = JSON.parse(body);
					} catch(err) {
						errtrack.logErr('Error parsing JSON: ' + body, req, env_settings);
						res.end(JSON.stringify({status: 'FAILED', status_detail: 'Error parsing JSON'}));
						return false;
					}

				} else {

					// Parse form data
					params = body.split('&');

					// get input vars from post data ----------------
					for (param in params) {
						pair = params[param].split('=');

						switch (pair[0]) {
							case 'cat_code':
								PARAM_cat_code = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

						}
					}
				}
			}


			// AJAX Handers ----------------------------------------------------
			switch (req.url.toLowerCase()) {

				case '/site/ajax/getProducts'.toLowerCase():
					processGetProducts();
					break;

				case '/site/ajax/order_form_menus':
					getOrderFormMenus();
					break;

				case '/site/ajax/post_order':
					postOrder();
					break;

				case '/site/ajax/updatecart_onhand':
					processUpdateCart_onhand();
					break;

				default:
					console.log('INVALID ajax handler: ' + req.url)
					return;
					break;
			}

		});




		// ------------------------------------ /site/ajax/getProducts ----------------------
		function processGetProducts() {

			var return_data = {};
			var last_size = '';

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = "SELECT p.*, ";
				sql += "(SELECT file_url FROM file_uploads WHERE control_code = 'PROD' and status = 'A' and control_rec_id = p.id LIMIT 1) AS file_url, ";
				sql += "(SELECT thumb_url FROM file_uploads WHERE control_code = 'PROD' and status = 'A' and control_rec_id = p.id LIMIT 1) AS thumb_url ";
				sql += "FROM products p, product_sizes ps ";
				sql += "WHERE ps.size = p.size AND p.status = 'A' and p.on_hand > 0 ";
				if (PARAM_cat_code) {
					sql += "AND p.cat_code = " + connection.escape(PARAM_cat_code) + " ";
				}
				sql += "ORDER BY ps.order_num";

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						connection.release();
						errtrack.reportErr(err, req, res, env_settings, sql);
						return;
					}

						if (rows) {
							for (var i = 0; i < rows.length; i++) {
								if (rows[i].size != last_size) {
									return_data[rows[i].size] = [];
									last_size = rows[i].size;
								}
								return_data[rows[i].size].push(rows[i]);
							}
						}

						connection.release();
						res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_data}));
						return;

				});

			});

		}


		// ------------------------------------ /site//ajax/order_form_menus ----------------------
		function getOrderFormMenus() {

			var return_menus = {};

			env_settings.connection_pool.getConnection(function(err, connection) {

				// Countries menu --------
				sql = "select 1 as sort1, id, country from countries where status='A' and quick_list='Y' ";
				sql += "UNION select 2 as sort1, id, country from countries where status='A' order by sort1, country;";

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						connection.release();
						errtrack.reportErr(err, req, res, env_settings, sql);
						return;
					}

					var last_sort1 = 0;
					var default_val = '228'; // USA
					var sel = '';

					var countries_menu = '<optgroup label><option value="">Select Country</option></optgroup>';
					countries_menu += '<optgroup label="------------">';

					for (var i = 0; i < rows.length; i++) {
						if ((rows[i].sort1 == 2) && (last_sort1 == 1)) {
							countries_menu += '</optgroup><optgroup label="------------">';
						}
							if (rows[i].id == default_val) {
								sel = ' SELECTED';
								default_val = ''; // Only select first match
							} else {
								sel = '';
							}
						countries_menu += '<option value="' + rows[i].id + '"' + sel + '>' + rows[i].country + '</option>';
						last_sort1 = rows[i].sort1;
					}

					countries_menu += '</optgroup>';
					return_menus.countries_menu = countries_menu;

					// States  menu ---------
					sql = "select * from states where country_code = 'US' order by state;";

					if (logSQL) {
						console.log(sql);
					}

					connection.query(sql, function(err, rows, fields) {
						if (err) {
							connection.release();
							errtrack.reportErr(err, req, res, env_settings, sql);
							return;
						}

						var states_menu = '<optgroup label><option value="">Select State</option></optgroup>';
						states_menu += '<optgroup label="------------">';

						for (var i = 0; i < rows.length; i++) {
							states_menu += '<option value="' + rows[i]['state_code'] + '">' + rows[i]['state'] + '</option>';
						}
						states_menu += '</optgroup>';
						return_menus.states_menu = states_menu;

						connection.release();
						res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_menus}));
						return;
					});
				});
			});
		}



		// ------------------------------------ /site/ajax/updatecart_onhand ----------------------
		function processUpdateCart_onhand() {
			var return_data = [];
			var cartItems = post_data.cartItems;
			var delim = '';

			if (cartItems.length == 0) {
				res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_data}));
				return;
			}

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'SELECT id AS prod_id, on_hand FROM products ';
				sql += 'WHERE id IN (';

				for (var i = 0; i < cartItems.length; i++) {
					sql += delim + cartItems[i].prod_id;
					delim = ',';
				}

				sql += ')';

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {
					if (err) {
						connection.release();
						errtrack.reportErr(err, req, res, env_settings, sql);
						return;
					}

					for (i = 0; i < rows.length; i++) {
						return_data.push({prod_id: rows[i].prod_id, on_hand: rows[i].on_hand});
					}

					connection.release();
					res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_data}));
					return;

				 });
			});
		}





		// ------------------------------------ /ajax/post_order ----------------------
		function postOrder() {
			var formdata;
			var delim = '';
			var order_num;
			var emailLineItems = '';
			var emailCharges = '';

			env_settings.connection_pool.getConnection(function(err, connection) {

				// Process form data to database
				var dt = new Date();
				var isql, vsql, sql;

				// Begin DB Transaction
				connection.query('BEGIN', function(err) {

					if (err) {
						connection.release();
						errtrack.reportErr(err, req, res, env_settings, sql);
						return;
					}

					isql = 'INSERT INTO order_header (';
					vsql = ' VALUES ('

					isql += 'order_date';
					vsql += connection.escape(dt);

					for (var prop in post_data) {
						if (prop != 'cart') {
							if (prop != 'card_number') {
								isql += ',' + prop;
								vsql += ',' + connection.escape(cnull(post_data[prop]));
							} else {

								isql += ',card_number';
								vsql += ",'XXXXXXXXXXXXXXXX'";

								isql += ',encrypted_card_number';
								vsql += ',' + connection.escape(encryption.crypt(post_data[prop], 'encrypt', env_settings.encryption_key));

							}
						}
					}

					sql = isql + ')' + vsql + ');';

					if (logSQL) {
						console.log(sql);
					}

					emailCharges += 'Shipping: $' + formatCurrency(post_data.shipping_cost) + '\n';
					emailCharges += 'Order Total: $' + formatCurrency(post_data.shipping_cost + post_data.items_total_cost) + '\n';

					// Insert order_header record
					connection.query(sql, function(err, result) {

						if (err) {
							connection.query('ROLLBACK', function() {
								connection.release();
								errtrack.reportErr(err, req, res, env_settings, sql);
							});
							return;
						}

						order_num = result.insertId;
			
						// Add cart items to order_detail (recursively)
						processCart(1);

					});



					function processCart(line_item) {
						var isql, vsql, sql;
						var thisLineItem = post_data.cart.shift();
						var thisItemDesc = thisLineItem.prodSize + ' ' + thisLineItem.desc + ' ' + thisLineItem.name;

						isql = 'INSERT INTO order_detail (';
						vsql = ' VALUES (';

						isql += 'order_num';
						vsql += connection.escape(order_num);

						isql += ',line_item';
						vsql += ',' + connection.escape(line_item);

						isql += ',prod_id';
						vsql += ',' + connection.escape(thisLineItem.prod_id);

						isql += ',prod_name';
						vsql += ',' + connection.escape(thisItemDesc);

						isql += ',sell_price';
						vsql += ',' + connection.escape(thisLineItem.price);

						isql += ',qty';
						vsql += ',' + connection.escape(thisLineItem.qty);

						sql = isql + ')' + vsql + ');';

						if (logSQL) {
							console.log(sql);
						}

						emailLineItems += '   Qty. ' + thisLineItem.qty + ': ' + thisItemDesc + '\n';


						// Insert order_detail line item
						connection.query(sql, function(err, result) {

							if (err) {
								connection.query('ROLLBACK', function() {
									connection.release();
									errtrack.reportErr(err, req, res, env_settings, sql);
								});
								return;
							}

							// Update inventory
							sql = 'UPDATE products SET on_hand = on_hand - ' + connection.escape(+thisLineItem.qty) + ' ';
							sql += 'WHERE id = ' + connection.escape(+thisLineItem.prod_id);

							if (logSQL) {
								console.log(sql);
							}

							connection.query(sql, function(err, result) {

								if (err) {
									connection.query('ROLLBACK', function() {
										connection.release();
										errtrack.reportErr(err, req, res, env_settings, sql);
									});
									return;
								}

								if (post_data.cart.length > 0) {
									processCart(line_item + 1);
								} else {
									finalizeOrder();
								}

							});

						});

						
					}

					function finalizeOrder() {
						if (env_settings.env_mode == 'PROD') {
							sendConfirmationEmail(post_data.email, post_data.name, order_num, notification_email, req)
						} else {
							console.log('Email would be sent to ' + post_data.name + ', ' + post_data.email);
						}

						// Commit DB Transaction
						connection.query('COMMIT', function(err) {

							if (err) {
								connection.query('ROLLBACK', function() {
									connection.release();
									errtrack.reportErr(err, req, res, env_settings, sql);
								});
								return;
							}

							connection.release();
							res.end(JSON.stringify({status: 'OK', status_text: '', payload: {order_num: order_num}}));
							return;

						});

					}



					function sendConfirmationEmail(emailTo, emailToFullname, order_num, notification_email) {

						var email_msg;

						email_msg = 'Thank you for your order! Your order number is #' + order_num + '.\n\n';

						email_msg += 'We are excited you share our enthusiasm for "Pampering Poultry!"\n\n';

						email_msg += 'Your order details:\n\n';
						email_msg += emailLineItems + '\n\n';
						email_msg += emailCharges + '\n\n';

						email_msg += 'Chickens come in all shapes and sizes and we always love to hear feedback from our customers ';
						email_msg += 'on the fit and functionality of our products. Please feel free to email pictures, ';
						email_msg += 'comments or questions to me at pamperyourpoultry@yahoo.com or call Julie at (603) 558-4934.\n\n';

						email_msg += 'Julie Baker\n';
						email_msg += 'Pampered Poultry\n';
						email_msg += 'julie@pamperyourpoultry.com\n';

						console.log('Sending order confirmation email to: ' + emailTo);

						// Customer email
						sendMail.sendEmail(
							{
								msg: email_msg,
								from: 'Julie Baker <julie@pamperyourpoultry.com>',
								to: emailToFullname + ' <' + emailTo + '>',
								subject: 'Thank you for your Pampered Poultry order'
							},
							env_settings.emailSettings,
							function (err) {
								if (err) {
									// Log any email errors for reference
									errtrack.logErr(err, req, env_settings, null, 'Error sending order conf email');
								}
							}
						);


						// Business notification email
						email_msg = 'New order from ' + emailToFullname + '\n';
						email_msg += 'Email: ' + emailTo + '\n\n';
						email_msg += 'http://www.pamperyourpoultry.com/ops\n\n';

						sendMail.sendEmail(
							{
								msg: email_msg,
								from: 'Julie Baker <julie@pamperyourpoultry.com>',
								to: notification_email,
								subject: '*** New Pampered Poultry Order: ' + order_num + ' ***'
							},
							env_settings.emailSettings,
							function (err) {
								if (err) {
									// Log any email errors for reference
									errtrack.logErr(err, req, env_settings, null, 'Error sending notification email');
								}
							}
						);

					}

				}); // End DB Transaction

			}); // End DB Connection

		}

	}

}



function formatCurrency(num) {
	num = isNaN(num) || num === '' || num === null ? 0.00 : num;
	return parseFloat(num).toFixed(2);
}


function cnull(f) {
	if (f.length == 0) {
		return null
	} else {
		return f;
	}
}

/* Expose public functions ------ */
exports.ajaxHandlers = ajaxHandlers;


