var mysql = require('mysql');
var md5 = require("blueimp-md5").md5;
var fs = require('fs');
var encryption = require("encryption");
var errtrack = require('errtrack');

// Get client IP address ----------------------
getClientAddress = function (req) {
		return (req.headers['x-forwarded-for'] || '').split(',')[0] 
				|| req.connection.remoteAddress;
};

ajaxHandlers = function (env_settings) {

	return function ajaxHandlers(req, res, next) {

		var body = '';
		var pair, params, sql, post_data;

		var userid, pwd, new_token, ACCESS_TOKEN;
		var add_plumage_menu_color;

		var order_numm, id;

		var edit_id;

		var breed_id;
		var plumage_code;

		// Pass to next Connect module if URL is not an ops url
		if (req.url.length > 9) {
			if (req.url.toLowerCase().substring(0, 10) != '/ops/ajax/') {
				next();
				return;
			}
		} else {
			next();
			return;
		}

		// Set up general variables
		var dt = new Date();
		var connectionInfo = env_settings.dbConnSettings;
		var connection;
		var client_ip = getClientAddress(req);
		var logSQL = env_settings.logSQL;

		// Build body string that contains the entire message body
		req.on('data', function(chunk) {
			body += chunk;
		});

		req.on('end', function() {
			if (body) {

				// Handlers that take JSON, not form data
				if (('/ops/ajax/addbreed' == req.url.toLowerCase()) ||
					('/ops/ajax/filterlist' == req.url.toLowerCase()) ||
					('/ops/ajax/updatebreed' == req.url.toLowerCase()) ||
					('/ops/ajax/updateprod' == req.url.toLowerCase()) ||
					('/ops/ajax/retirefileupload' == req.url.toLowerCase()) ||
					('/ops/ajax/updateorder' == req.url.toLowerCase()) ||
					('/ops/ajax/addprod' == req.url.toLowerCase()))
				 {

					try {
						post_data = JSON.parse(body);
					} catch(err) {
						res.end(JSON.stringify({status: 'FAILED', status_detail: 'Error parsing JSON'}));
					}

					// Get access token and then remove from post data to avoid introducing it into functions
					ACCESS_TOKEN = post_data.ACCESS_TOKEN;
					delete post_data.ACCESS_TOKEN;

				} else {

					// Parse form data
					params = body.split('&');

					// get input vars from post data ----------------
					for (param in params) {
						pair = params[param].split('=');

						switch (pair[0]) {
							case 'userid':
								userid = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'pwd':
								pwd = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'ACCESS_TOKEN':
								ACCESS_TOKEN = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'add_plumage_menu_color':
								add_plumage_menu_color = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'plumage_code':
								plumage_code = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'breed_id':
								breed_id = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'edit_id':
								edit_id = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'id':
								id = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;

							case 'order_num':
								order_num = decodeURIComponent(pair[1]).replace(/\+/g, ' ');
								break;
						}
					}
				}
			}


			// AJAX Handers ----------------------------------------------------

			validateToken(ACCESS_TOKEN, function() {

				switch (req.url.toLowerCase()) {

					case '/ops/ajax/login':
						if (userid && pwd) {
							processLogin(userid, pwd);
						} else {
							res.end(JSON.stringify({status: 'FAILED', status_text: 'No userid or pwd provided.'}));
						}
						break;

					case '/ops/ajax/filterList'.toLowerCase():
						processFilterList();
						break;

					case '/ops/ajax/retireFileUpload'.toLowerCase():
						processRetireFileUpload();
						break;

					// breed function handlers ------------------------
					case '/ops/ajax/getBreedMenus'.toLowerCase():
						processGetBreedMenus();
						break;

					case '/ops/ajax/addPlumage'.toLowerCase():
						processAddPlumage(add_plumage_menu_color);
						break;

					case '/ops/ajax/addBreed'.toLowerCase():
						processAddBreed();
						break;

					case '/ops/ajax/updateBreed'.toLowerCase():
						processUpdateBreed();
						break;

					case '/ops/ajax/getBreed'.toLowerCase():
						processGetBreed();
						break;

					case '/ops/ajax/removePlumage'.toLowerCase():
						processRemovePlumage();
						break;

					case '/ops/ajax/addBreedPlumage'.toLowerCase():
						processAddBreedPlumage();
						break;


					// prod function handlers ------------------------
					case '/ops/ajax/getProdMenus'.toLowerCase():
						processGetProdMenus();
						break;

					case '/ops/ajax/addProd'.toLowerCase():
						processAddProd();
						break;

					case '/ops/ajax/getProd'.toLowerCase():
						processGetProd();
						break;

					case '/ops/ajax/updateProd'.toLowerCase():
						processUpdateProd();
						break;


					// order function handlers ------------------------
					case '/ops/ajax/getOrder'.toLowerCase():
						processGetOrder();
						break;

					case '/ops/ajax/updateOrder'.toLowerCase():
						processUpdateOrder();
						break;

					case '/ops/ajax/getInvoice'.toLowerCase():
						processGetInvoice();
						break;

					// DEFAULT --------
					default:
						console.log('INVALID OPS handler: ' + req.url)
						return;
						break;
				}

			});

		});



		// ---------- Validate user access and continue via callback ----------
		function validateToken(token, callback) {

			// No token required for login process or menu requests
			if ((req.url.toLowerCase() == '/ops/ajax/login') ||
					(req.url.toLowerCase() == '/ops/ajax/getbreedmenus') ||
					(req.url.toLowerCase() == '/ops/ajax/getbreed') ||
					(req.url.toLowerCase() == '/ops/ajax/getinvoice') ||
					(req.url.toLowerCase() == '/ops/ajax/getprodmenus')) {
				callback();
				return;
			}

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'SELECT * from ops_sessions WHERE token = ' + connection.escape(token);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					if (rows.length == 1) {
						connection.release();
						callback();
					} else {
						console.log('INVALID ACCESS TOKEN: ' + token);
						connection.release();
						res.end(JSON.stringify({status: 'FAILED', status_text: 'Invalid token.'}));
						return;
					}

				});
			});
		}



		// ------------------------------------ /ajax/login ----------------------
		function processLogin(userid, pwd) {

			var return_name, return_email;

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'SELECT * from ops_users WHERE userid = ' + connection.escape(userid);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					if (rows.length > 0) {

						if (rows[0].password == pwd) {
							return_name = rows[0].name;
							return_email = rows[0].email;

							new_token = md5(userid + '-' + String(dt) + '-' + String(client_ip));
							console.log('New OPS hash token assigned for login user ' + userid + ': ' + new_token);

							var token_expire_date = new Date(dt.getFullYear(), dt.getMonth() + 1, dt.getDate());

							sql = 'INSERT INTO ops_sessions (userid, token, expire_date) VALUES (';
							sql += connection.escape(userid) + ',' + connection.escape(new_token) + ',' + connection.escape(token_expire_date) + ')';

							if (logSQL) {
								console.log(sql);
							}

							connection.query(sql, function(err, result) {

								if (err) {
									errtrack.reportOpsErr(err, res, sql);
									connection.release();
									return;
								}

								connection.release();
								res.end(JSON.stringify({status: 'OK', status_text: '', payload: {
									name: return_name,
									email: return_email,
									token: new_token,
									token_expire_date: token_expire_date.toJSON()
								}}));
								return;
							});


						} else {
							connection.release();
							res.end(JSON.stringify({status: 'FAILED', status_text: 'Invalid login.'}));
							return;
						}

					} else {
						connection.release();
						res.end(JSON.stringify({status: 'FAILED', status_text: 'Invalid login: No such user.'}));
						return;
					}


				});
			});
		}


		// ------------------------------------ /ajax/getBreedMenus ----------------------
		function processGetBreedMenus() {

			var return_menus = {};

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'SELECT * from breeds_class ORDER BY parent_class';

				if (logSQL) {
					console.log(sql);
				}

				// Breed Class menu ---------
				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					var breed_class_menu = '<option value=""></option>';
					var parent_class = '';

					for (var i = 0; i < rows.length; i++) {
						if (rows[i].parent_class != parent_class) {
							if (parent_class != '') {
								breed_class_menu += '</optgroup>';
							}
							parent_class = rows[i].parent_class;
							breed_class_menu += '<optgroup label="' + rows[i].parent_class + '">';
						}
						if (rows[i].class.length > 0) {
							breed_class_menu += '<option value="' + rows[i].code + '">' + rows[i].class + '</option>';
						} else {
							breed_class_menu += '<option value="' + rows[i].code + '">' + rows[i].parent_class + '</option>';
						}
					}
					breed_class_menu += '</optgroup>';

					return_menus.breed_class_menu = breed_class_menu;


					// Comb menu ---------
					sql = 'SELECT comb_name from breed_comb ORDER BY comb_name';

					if (logSQL) {
						console.log(sql);
					}

					connection.query(sql, function(err, rows, fields) {

						if (err) {
							errtrack.reportOpsErr(err, res, sql);
							connection.release();
							return;
						}

						var comb_menu = '<option value=""></option>';

						for (var i = 0; i < rows.length; i++) {
							comb_menu += '<option value="' + rows[i].comb_name + '">' + rows[i].comb_name + '</option>';
						}

						return_menus.comb_menu = comb_menu;


						// Plumage menu ---------
						sql = 'SELECT * from breed_plumage ORDER BY color';

						if (logSQL) {
							console.log(sql);
						}

						connection.query(sql, function(err, rows, fields) {

							if (err) {
								errtrack.reportOpsErr(err, res, sql);
								connection.release();
								return;
							}

							var plumage_menu = '<option value="">--Select color to add--</option>';

							for (var i = 0; i < rows.length; i++) {
								plumage_menu += '<option value="' + rows[i].code + '">' + rows[i].color + '</option>';
							}

							return_menus.plumage_menu = plumage_menu;

							connection.release();
							res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_menus}));
							return;

						});

					});

				});

			});

		}


		// ------------------------------------ /ajax/addPlumage ----------------------
		function processAddPlumage(add_plumage_menu_color) {
			var new_code;

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'INSERT INTO breed_plumage (color) VALUES (' + connection.escape(add_plumage_menu_color) + ')';

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, result) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					new_code = result.insertId;
					connection.release();

					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {new_code: new_code}}));
					return;

				});
			});
		}

		// ------------------------------------ /ajax/addBreed ----------------------
		function processAddBreed() {
			var isql = '';
			var vsql = '';
			var delim = '';
			var id;

			env_settings.connection_pool.getConnection(function(err, connection) {

				// Begin DB Transaction
				connection.query('BEGIN', function(err) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					isql = 'INSERT INTO breeds (';
					vsql = ' VALUES (';

					for (var prop in post_data) {
						if (prop != 'plumage_array') {
							isql += delim + prop;
							vsql += delim + connection.escape(cnull(post_data[prop]));
							delim = ',';
						}
					}

					sql = isql + ')' + vsql + ')';

					if (logSQL) {
						console.log(sql);
					}

					connection.query(sql, function(err, result) {

						if (err) {
							connection.query('ROLLBACK', function() {
								errtrack.reportOpsErr(err, res, sql);
								connection.release();
							});
							return;
						}

						id = result.insertId;
						
						// recursive call to insert plumages
						insertPlumage(post_data.plumage_array);

					});

					function insertPlumage(plumage_array) {

						if (plumage_array.length == 0) {
							// Last plumage insert done

							connection.query('COMMIT', function(err) {

								if (err) {
									connection.query('ROLLBACK', function() {
										errtrack.reportOpsErr(err, res, sql);
										connection.release();
									});
									return;
								}

								connection.release();
								res.end(JSON.stringify({status: 'OK', status_text: '', payload: {id: id}}));
								return;

							});

							return;
						}


						sql = 'INSERT INTO breed_plumage_map (breed_id, plumage_code, standard) VALUES (';
						sql += connection.escape(id) + ',' + connection.escape(parseInt(plumage_array.pop())) + ',' + connection.escape('Y') + ')';

						if (logSQL) {
							console.log(sql);
						}

						connection.query(sql, function(err, result) {

							if (err) {
								connection.query('ROLLBACK', function() {
									errtrack.reportOpsErr(err, res, sql);
									connection.release();
								});
								return;
							}

							insertPlumage(plumage_array);
						});
					}

				}); // End DB Transaction

			}); // End DB Connection
		}




		// ------------------------------------ /ajax/updateBreed ----------------------
		function processUpdateBreed() {
			var delim = '';

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'UPDATE breeds SET ';

				for (var prop in post_data) {
					if ((prop != 'plumage_array') && (prop != 'breed_id')) {
						sql += delim + prop + '=';
						sql += connection.escape(cnull(post_data[prop]));
						delim = ', ';
					}
				}

				sql += ' WHERE id = ' + connection.escape(post_data.breed_id);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, result) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					connection.release();
					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {}}));
					return;
				});
			});
		}











		// ------------------------------------ /ajax/filterList ----------------------
		function processFilterList() {

			var col_query_string = '';
			var delim;

			// console.log('post_data=' + JSON.stringify(post_data));

			var ops_function = post_data.query_settings.ops_function;
			var cols = post_data.query_settings.cols;
			var sortList = post_data.sort_list;
			var sortString = '';

			// Build select columns list for query
			delim = '';
			for (var i = 0; i < cols.length; i++) {
				if (cols[i].db_field) {
					col_query_string += delim + cols[i].db_field + ' AS ' + cols[i].db_alias;
					delim = ', ';
					if (cols[i].link_record_id_db_field) {
						col_query_string += delim + cols[i].link_record_id_db_field + ' AS ' + cols[i].link_record_id_db_alias;
					}
				}
			}

			// Build sort list
			delim = 'ORDER BY ';
			for (var i = 0; i < sortList.length; i++) {
				sortString += delim + sortList[i].field + ' ' + sortList[i].sortOrder;
				delim = ', '
			}


			switch(ops_function) {

				case 'breed':

					sql = 'SELECT ' + col_query_string;
					sql += ', (SELECT COUNT(*) FROM posts WHERE breed_id = breeds.id) as uploads '
					sql += 'FROM breeds, breeds_class ';
					sql += 'WHERE breeds_class.code = breeds.breed_class_code ';

					for (var prop in post_data.filter_vars) {
						if (post_data.filter_vars[prop]) {
							sql += "AND " + prop + " LIKE '%" + post_data.filter_vars[prop] + "%' ";
						}
					}

					sql += sortString;

					break;


				case 'prod':

					sql = 'SELECT ' + col_query_string;
					sql += ", (SELECT CONCAT(hash, '.', file_ext) FROM file_uploads WHERE control_code = 'PROD' and status = 'A' and control_rec_id = products.id LIMIT 1) AS img_name ";
					sql += ", (SELECT file_url FROM file_uploads WHERE control_code = 'PROD' and status = 'A' and control_rec_id = products.id LIMIT 1) AS img_url ";
					sql += ' FROM products, product_cats WHERE product_cats.code = products.cat_code ';

					for (var prop in post_data.filter_vars) {
						if (post_data.filter_vars[prop]) {
							sql += "AND " + prop + " LIKE '%" + post_data.filter_vars[prop] + "%' ";
						}
					}

					sql += sortString;

					break;


				case 'order':

					sql = 'SELECT ' + col_query_string;
					sql += ', (SELECT SUM(qty) FROM order_detail od WHERE od.order_num = order_header.order_num) AS qty ';
					sql += ', order_header.items_total_cost + order_header.shipping_cost AS total ';
					sql += 'FROM order_header, countries ';
					sql += 'WHERE countries.id = order_header.country_code ';

					for (var prop in post_data.filter_vars) {
						if (post_data.filter_vars[prop]) {
							sql += "AND " + prop + " LIKE '%" + post_data.filter_vars[prop] + "%' ";
						}
					}

					sql += sortString;

					break;


			}

			if (logSQL) {
				console.log(sql);
			}

			env_settings.connection_pool.getConnection(function(err, connection) {

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {rows: rows}}));
					connection.release();
					return;

				});

			});

		}



		// ------------------------------------ /ajax/getBreed ----------------------
		function processGetBreed() {

			var return_data = {plumage_codes: []};

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'SELECT * FROM breeds WHERE id = ' + connection.escape(breed_id);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					if (rows) {
						if (rows.length == 1) {
							return_data.breed = rows[0];

							sql = 'SELECT p.code, p.color FROM breed_plumage p, breed_plumage_map m ';
							sql += 'WHERE m.breed_id = ' + connection.escape(parseInt(breed_id)) + ' ';
							sql += 'AND p.code = m.plumage_code ORDER BY p.color';

							if (logSQL) {
								console.log(sql);
							}

							connection.query(sql, function(err, rows, fields) {

								if (err) {
									errtrack.reportOpsErr(err, res, sql);
									connection.release();
									return;
								}

								return_data.plumage_codes = rows;

								connection.release();
								res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_data}));
								return;

							});

						} else {
							connection.release();
							res.end(JSON.stringify({status: 'FAILED', status_text: 'No record found in database'}));
							return;
						}
					} else {
						connection.release();
						res.end(JSON.stringify({status: 'FAILED', status_text: 'No records found in database'}));
						return;
					}
				});

			});

		}


		// ------------------------------------ /ajax/removePlumage ----------------------
		function processRemovePlumage() {
			
			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'DELETE FROM breed_plumage_map ';
				sql += 'WHERE breed_id = ' + connection.escape(parseInt(breed_id)) + ' ';
				sql += 'AND plumage_code = ' + connection.escape(parseInt(plumage_code));

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, result) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					connection.release();
					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {}}));
					return;
				});

			});

		}


		// ------------------------------------ /ajax/addBreedPlumage ----------------------
		function processAddBreedPlumage() {

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'INSERT INTO breed_plumage_map (breed_id, plumage_code, standard) VALUES (';
				sql += connection.escape(parseInt(breed_id)) + ', ';
				sql += connection.escape(parseInt(plumage_code)) + ', ';
				sql += connection.escape('Y') + ')';

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, result) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					connection.release();
					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {}}));
					return;
				});

			});

		}




		// ------------------------------------ /ajax/getProdMenus ----------------------
		function processGetProdMenus() {

			var return_menus = {};

			env_settings.connection_pool.getConnection(function(err, connection) {

				// Product Category menu --------
				sql = 'SELECT * from product_cats ORDER BY cat_name';

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					var prod_cat_menu = '<option value=""></option>';

					for (var i = 0; i < rows.length; i++) {
							prod_cat_menu += '<option value="' + rows[i].code + '">' + rows[i].cat_name + '</option>';
					}

					return_menus.prod_cat_menu = prod_cat_menu;

					// Product sizes menu ---------
					sql = 'SELECT * from product_sizes ORDER BY order_num';

					if (logSQL) {
						console.log(sql);
					}

					connection.query(sql, function(err, rows, fields) {

						if (err) {
							errtrack.reportOpsErr(err, res, sql);
							connection.release();
							return;
						}

						var prod_size_menu = '';
						//prod_size_menu += '<option value=""></option>';

						for (var i = 0; i < rows.length; i++) {
								prod_size_menu += '<option value="' + rows[i]['size'] + '">' + rows[i]['size'] + '</option>';
						}

						return_menus.prod_size_menu = prod_size_menu;

						connection.release();
						res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_menus}));
						return;
					});
				});
			});
		}


		// ------------------------------------ /ajax/addProd ----------------------
		function processAddProd() {
			var isql = '';
			var vsql = '';
			var delim = '';
			var id;
			var return_ids = [];

			env_settings.connection_pool.getConnection(function(err, connection) {

				processSizes();

				function processSizes() {
					var thisSize;
					if (post_data.size.length > 0) {
						thisSize = post_data.size.shift();

						isql = 'INSERT INTO products (';
						vsql = ' VALUES (';

						delim = '';
						for (var prop in post_data) {
							isql += delim + prop;
							if (prop != 'size') {
								vsql += delim + connection.escape(cnull(post_data[prop]));
								delim = ',';
							} else {
								vsql += delim + connection.escape(thisSize);
							}
						}

						sql = isql + ')' + vsql + ')';

						if (logSQL) {
							console.log(sql);
						}

						connection.query(sql, function(err, result) {
	
							if (err) {
								errtrack.reportOpsErr(err, res, sql);
								connection.release();
								return;
							}

							return_ids.push(result.insertId);
							processSizes();
						});

					} else {
						connection.release();
						res.end(JSON.stringify({status: 'OK', status_text: '', payload: {ids: return_ids}}));
						return;
					}
				}

			});

		}





		// ------------------------------------ /ajax/getProd ----------------------
		function processGetProd() {

			if (edit_id != parseInt(edit_id)) {
				res.end(JSON.stringify({status: 'FAILED', status_text: 'Invalid edit id'}));
				return;
			}

			var return_data = {};

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'SELECT * FROM products WHERE id = ' + connection.escape(+edit_id);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					if (rows) {
						if (rows.length == 1) {
							return_data.formData = rows[0];

							sql = "SELECT * FROM file_uploads WHERE control_code = 'PROD' AND status = 'A' ";
							sql += "AND control_rec_id = " + connection.escape(+edit_id);
							sql += ' ORDER BY id';

							if (logSQL) {
								console.log(sql);
							}

							connection.query(sql, function(err, rows, fields) {

								if (err) {
									errtrack.reportOpsErr(err, res, sql);
									connection.release();
									return;
								}

								if (rows) {
									return_data.uploadsArray = rows;
								}

								connection.release();
								res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_data}));
								return;
							});


						} else {
							connection.release();
							res.end(JSON.stringify({status: 'FAILED', status_text: 'No record found in database'}));
							return;
						}
					} else {
						connection.release();
						res.end(JSON.stringify({status: 'FAILED', status_text: 'No records found in database'}));
						return;
					}

				});

			});

		}




		// ------------------------------------ /ajax/updateProd ----------------------
		function processUpdateProd() {
			var delim = '';

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'UPDATE products SET ';

				for (var prop in post_data) {
					if (prop != 'prod_id') {
						sql += delim + prop + '=';
						sql += connection.escape(cnull(post_data[prop]));
						delim = ', ';
					}
				}

				sql += ' WHERE id = ' + connection.escape(post_data.prod_id);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, result) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					connection.release();
					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {}}));
					return;
				});

			});

		}



		// ------------------------------------ /ajax/retireFileUpload ----------------------
		function processRetireFileUpload() {
			var delim = '';

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = "UPDATE file_uploads SET status = 'I' ";
				sql += ' WHERE id = ' + connection.escape(post_data.id);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, result) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					connection.release();
					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {}}));
					return;
				});
			});
		}




		// ------------------------------------ /ajax/updateOrder ----------------------
		function processUpdateOrder() {
			var delim = '';

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = 'UPDATE order_header SET ';

				for (var prop in post_data) {
					if (prop != 'order_num') {
						sql += delim + prop + '=';
						sql += connection.escape(cnull(post_data[prop]));
						delim = ', ';
					}
				}

				sql += ' WHERE order_num = ' + connection.escape(post_data.order_num);

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, result) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					connection.release();
					res.end(JSON.stringify({status: 'OK', status_text: '', payload: {}}));
					return;
				});
			});
		}




		// ------------------------------------ /ajax/getOrder ----------------------
		function processGetOrder() {

			var return_data = {};

			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = "SELECT oh.*, c.country, CONCAT(oh.expire_month, '/', oh.expire_year) AS expires ";
				sql += 'FROM order_header oh, countries c ';
				sql += 'WHERE oh.order_num = ' + connection.escape(order_num) + ' ';
				sql += 'AND c.id = oh.country_code'

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					if (rows) {
						if (rows.length == 1) {

							// Decrypt card number
							rows[0].card_number = encryption.crypt(rows[0].encrypted_card_number, 'decrypt', env_settings.encryption_key);

							return_data.order_header = rows[0];

							sql = "SELECT *, CONCAT('#', prod_id, ': ', prod_name) AS item_desc FROM order_detail ";
							sql += 'WHERE order_num = ' + connection.escape(parseInt(order_num)) + ' ';
							sql += 'ORDER BY line_item';

							if (logSQL) {
								console.log(sql);
							}

							connection.query(sql, function(err, rows, fields) {

								if (err) {
									errtrack.reportOpsErr(err, res, sql);
									connection.release();
									return;
								}

								return_data.order_detail = rows;

								connection.release();
								res.end(JSON.stringify({status: 'OK', status_text: '', payload: return_data}));
								return;

							});

						} else {
							connection.release();
							res.end(JSON.stringify({status: 'FAILED', status_text: 'No record found in database'}));
							return;
						}
					} else {
						connection.release();
						res.end(JSON.stringify({status: 'FAILED', status_text: 'No records found in database'}));
						return;
					}
				});

			});

		}




		// ------------------------------------ /ops/ajax/getInvoice ----------------------
		function processGetInvoice() {

			var html = '';
			var dt = new Date();
			var nowDate = (dt.getMonth() + 1) + '/' + dt.getDate() + '/' + dt.getFullYear();
			var shipping, orderTot;


			env_settings.connection_pool.getConnection(function(err, connection) {

				sql = "SELECT oh.*, c.country, CONCAT(oh.expire_month, '/', oh.expire_year) AS expires ";
				sql += 'FROM order_header oh, countries c ';
				sql += 'WHERE oh.order_num = ' + connection.escape(order_num) + ' ';
				sql += 'AND c.id = oh.country_code'

				if (logSQL) {
					console.log(sql);
				}

				connection.query(sql, function(err, rows, fields) {

					if (err) {
						errtrack.reportOpsErr(err, res, sql);
						connection.release();
						return;
					}

					if (rows) {
						if (rows.length == 1) {

							shipping = rows[0].shipping_cost;
							orderTot = rows[0].items_total_cost + +shipping;

							html += '<!DOCTYPE html><html><head><title>PamperYourPoultry - Invoice #' + order_num + '</title>';
							html += '<style>td {white-space: nowrap; vertical-align: top;}</style>';
							html += '<link rel="shortcut icon" href="/images/favicon.ico"></head><body>';

							html += '<table width=1000 style="border-style: solid; border-width: 1px; border-color: #000; padding: 25px;">';
							html += '<tr><td width="50%"><img src="/images/site/logo.png"><br>';
							html += '<div style="padding-left: 80px; font-size: 85%; position: relative; left: -16px; top: 0;">';
							html += '95 Windsor Rd<br>';
							html += 'Claremont, NH 03743<br>';
							html += '(603) 558-4934';
							html += '</div></td><td width="50%" align="right"><div style="padding-right: 50px;">';
							html += '<span style="font-size: 120%; font-weight: bold;">Invoice #' + order_num + '</span><br>';
							html += '<em>' + nowDate + '</em></div></td></tr>';
							html += '<tr><td colspan=2 height=40>&nbsp;</td></tr>';
							html += '<tr><td><table border=0><tr><td valign="top">Ship to:</td><td>';
							html += '<div style="margin-left:8px; padding: 4px; border-style: solid; border-width: 1px; border-color: #000;">';
							html += rows[0].name + '<br>';
							html += rows[0].add1 + '<br>';
							if (rows[0].add2) {
								html += rows[0].add2 + '<br>';
							}
							html += rows[0].city + ', ' + rows[0].state + ' ' + rows[0].zip + '<br>';
							html += rows[0].country;

							html += '</div></td></tr></table></td><td>';

							html += '<table border=0>';
							html += '<tr><td valign="top">Bill to:</td><td><div style="margin-left:8px; padding: 4px; border-style: solid; border-width: 1px; border-color: #000;">';
							html += rows[0].bill_add1 + '<br>';
							if (rows[0].bill_add2) {
								html += rows[0].bill_add2 + '<br>';
							}
							html += rows[0].bill_city + ', ' + rows[0].bill_state + ' ' + rows[0].bill_zip + '<br>';

							html += '</div></td></tr></table></td></tr><tr><td colspan=2 height=30>&nbsp;</td></tr><tr><td colspan=2 align="center" height=600>';
							html += '<table style="border-style: solid; border-width: 1px; border-color: #000;" width="70%" align="center">';
							html += '<tr bgcolor="#d0d0d0"><th align="center">Qty</th><th align="left">Description</th><th align="right">Amount</th></tr>';



							sql = "SELECT *, CONCAT('#', prod_id, ': ', prod_name) AS item_desc FROM order_detail ";
							sql += 'WHERE order_num = ' + connection.escape(parseInt(order_num)) + ' ';
							sql += 'ORDER BY line_item';

							if (logSQL) {
								console.log(sql);
							}

							connection.query(sql, function(err, rows, fields) {

								if (err) {
									errtrack.reportOpsErr(err, res, sql);
									connection.release();
									return;
								}

								for (var i = 0; i < rows.length; i++) {
									html += '<tr><td align="center">' + rows[i].qty + '</td><td>' + rows[i].item_desc + '</td>';
									html += '<td align="right">$' + formatCurrency(rows[i].sell_price * rows[i].qty) + '</td>';
									html += '</tr>';
								}

								html += '<tr><td>&nbsp;</td><td align="right">Shipping:&nbsp;&nbsp;</td><td align="right">$' + formatCurrency(shipping) + '</td></tr>';
								html += '<tr><td colspan=2>&nbsp;</td></tr><tr>';
								html += '<td style="border-top-style: solid; border-top-width: 1px; border-top-color: #000;">&nbsp;</td>';
								html += '<td style="border-top-style: solid; border-top-width: 1px; border-top-color: #000;" align="right">Order Total:&nbsp;&nbsp;</td>';
								html += '<td style="border-top-style: solid; border-top-width: 1px; border-top-color: #000;" align="right"><strong>$' + formatCurrency(orderTot) + '</strong></td></tr>';
								html += '</table></td></tr>';

								html += '<tr><td colspan=2><div style="font-size: 120%; padding: 25px;"><p><em>Thank you for your order!</em></p>';
								html += '<p>Be sure to like us on Facebook at <a href="#">www.facebook.com/PamperYourPoultry</a> to get<br>';
								html += 'all the latest updates and connect with pampered poultry around the globe.</p>';
								html += '<p>Website: <a href="#">www.pamperyourpoultry.com</a> | email us at <a href="mailto:pamperyourpoultry@yahoo.com">pamperyourpoultry@yahoo.com</a></p>';
								html += '</div></td></tr></table></body></html>';

								connection.release();
								res.end(html);
								return;

							});

						} else {
							connection.release();
							res.end('Order not found on server.');
							return;
						}
					} else {
						connection.release();
						res.end('Order not found on server.');
						return;
					}
				});

			});

		}







	}

}


function formatCurrency(num) {
		num = isNaN(num) || num === '' || num === null ? 0.00 : num;
		return parseFloat(num).toFixed(2);
}

function cnull(f) {
	if (f.length == 0) {
		return null
	} else {
		return f;
	}
}

/* Expose public functions ------ */
exports.ajaxHandlers = ajaxHandlers;


