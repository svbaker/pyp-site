{
  "author": {
    "name": "Ivan Akimov",
    "email": "ivan@grather.com",
    "url": "https://twitter.com/ivanakimov"
  },
  "name": "hashids",
  "description": "A small Node.js class to generate YouTube-like hashes from one or many numbers. Use hashids when you do not want to expose your database ids to the user. ",
  "version": "0.1.4",
  "preferGlobal": true,
  "homepage": "http://www.hashids.org/node-js/",
  "repository": {
    "type": "git",
    "url": "https://github.com/ivanakimov/hashids.node.js"
  },
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "license": "MIT",
  "keywords": [
    "hashids",
    "hash",
    "ids",
    "youtube"
  ],
  "engines": {
    "node": "*"
  },
  "readme": "\n# hashids\n\nA small Node.js class to generate YouTube-like hashes from one or many numbers. Use hashids when you do not want to expose your database ids to the user.\n\n[http://www.hashids.org/node-js/](http://www.hashids.org/node-js/)\n\n## What is it?\n\nhashids (Hash ID's) creates short, unique, decryptable hashes from unsigned integers.\n\nIt was designed for websites to use in URL shortening, tracking stuff, or making pages private (or at least unguessable).\n\nThis algorithm tries to satisfy the following requirements:\n\n1. Hashes must be unique and decryptable.\n2. They should be able to contain more than one integer (so you can use them in complex or clustered systems).\n3. You should be able to specify minimum hash length.\n4. Hashes should not contain basic English curse words (since they are meant to appear in public places - like the URL).\n\nInstead of showing items as `1`, `2`, or `3`, you could show them as `U6dc`, `u87U`, and `HMou`.\nYou don't have to store these hashes in the database, but can encrypt + decrypt on the fly.\n\nAll integers need to be greater than or equal to zero.\n\n## Installation\n\n1. Grab Node.js and install if you haven't already: [http://nodejs.org/download/](http://nodejs.org/download/)\n2. Install using npm:\n\t\n\t`npm install hashids`\n\t\n## Usage\n\n#### Encrypting one number\n\nYou can pass a unique salt value so your hashes differ from everyone else's. I use \"**this is my salt**\" as an example.\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar hash = hashids.encrypt(12345);\n```\n\n`hash` is now going to be:\n\t\n\tryBo\n\n#### Decrypting\n\nNotice during decryption, same salt value is used:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar numbers = hashids.decrypt(\"ryBo\");\n```\n\n`numbers` is now going to be:\n\t\n\t[ 12345 ]\n\n#### Decrypting with different salt\n\nDecryption will not work if salt is changed:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my pepper\");\n\nvar numbers = hashids.decrypt(\"ryBo\");\n```\n\n`numbers` is now going to be:\n\t\n\t[]\n\t\n#### Encrypting several numbers\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar hash = hashids.encrypt(683, 94108, 123, 5);\n```\n\n`hash` is now going to be:\n\t\n\tzBphL54nuMyu5\n\t\n#### Decrypting is done the same way\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar numbers = hashids.decrypt(\"zBphL54nuMyu5\");\n```\n\n`numbers` is now going to be:\n\t\n\t[ 683, 94108, 123, 5 ]\n\t\n#### Encrypting and specifying minimum hash length\n\nHere we encrypt integer 1, and set the minimum hash length to **8** (by default it's **0** -- meaning hashes will be the shortest possible length).\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\", 8);\n\nvar hash = hashids.encrypt(1);\n```\n\n`hash` is now going to be:\n\t\n\tb9iLXiAa\n\t\n#### Decrypting\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\", 8);\n\nvar numbers = hashids.decrypt(\"b9iLXiAa\");\n```\n\n`numbers` is now going to be:\n\t\n\t[ 1 ]\n\t\n#### Specifying custom hash alphabet\n\nHere we set the alphabet to consist of only four letters: \"abcd\"\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\", 0, \"abcd\");\n\nvar hash = hashids.encrypt(1, 2, 3, 4, 5);\n```\n\n`hash` is now going to be:\n\t\n\tadcdacddcdaacdad\n\t\n## Randomness\n\nThe primary purpose of hashids is to obfuscate ids. It's not meant or tested to be used for security purposes or compression.\nHaving said that, this algorithm does try to make these hashes unguessable and unpredictable:\n\n#### Repeating numbers\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar hash = hashids.encrypt(5, 5, 5, 5);\n```\n\nYou don't see any repeating patterns that might show there's 4 identical numbers in the hash:\n\n\tGLh5SMs9\n\nSame with incremented numbers:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar hash = hashids.encrypt(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n```\n\n`hash` will be :\n\t\n\tzEUzfySGIpuyhpF6HaC7\n\t\n### Incrementing number hashes:\n\n```javascript\n\nvar Hashids = require(\"hashids\"),\n\thashids = new Hashids(\"this is my salt\");\n\nvar hash1 = hashids.encrypt(1), /* LX */\n\thash2 = hashids.encrypt(2), /* ed */\n\thash3 = hashids.encrypt(3), /* o9 */\n\thash4 = hashids.encrypt(4), /* 4n */\n\thash5 = hashids.encrypt(5); /* a5 */\n```\n\n## Speed\n\nEven though speed is an important factor of every hashing algorithm, primary goal here was encoding several numbers at once and making the hash unique and random.\n\nWith Node 0.8.8, on a *2.7 GHz Intel Core i7 with 16GB of RAM*, it takes roughly **0.08 seconds** to:\n\n1. Encrypt 1000 hashes consisting of 1 integer `hashids.encrypt(12);`\n2. And decrypt these 1000 hashes back into integers `hashids.decrypt(hash);` while ensuring they are valid\n\nIf we do the same with 3 integers, for example: `hashids.encrypt(10, 11, 12);`\n-- the number jumps up to **0.13 seconds** on the same machine.\n\n*Sidenote: The numbers tested with were relatively small -- if you increase them, the speed will obviously decrease.*\n\n#### What you could do to speed it up\n\nUsually people either encrypt or decrypt one hash per request, so the algorithm should already be fast enough for that.\nHowever, there are still several things you could do:\n\n1. If you are generating a lot of hashes at once, wrap this class in your own so you can cache hashes.\n2. Use [MongoDB](http://www.mongodb.org/) or [Redis](http://redis.io/).\n3. You could also decrease the length of your alphabet. Your hashes will become longer, but calculating them will be faster.\n\n## Bad hashes\n\nI wrote this class with the intent of placing these hashes in visible places - like the URL. If I create a unique hash for each user, it would be unfortunate if the hash ended up accidentally being a bad word. Imagine auto-creating a URL with hash for your user that looks like this - `http://example.com/user/a**hole`\n\nTherefore, this algorithm tries to avoid generating most common English curse words with the default alphabet. This is done by never placing the following letters next to each other:\n\t\n\tc, C, s, S, f, F, h, H, u, U, i, I, t, T\n\t\n## Changelog\n\n**0.1.4 - Current Stable**\n\n- Global var leak for hashSplit (thanks to [@BryanDonovan](https://github.com/BryanDonovan))\n- Class capitalization (thanks to [@BryanDonovan](https://github.com/BryanDonovan))\n\n**0.1.3**\n\n\tWarning: If you are using 0.1.2 or below, updating to this version will change your hashes.\n\n- Updated default alphabet (thanks to [@speps](https://github.com/speps))\n- Constructor removes duplicate characters for default alphabet as well (thanks to [@speps](https://github.com/speps))\n\n**0.1.2**\n\n\tWarning: If you are using 0.1.1 or below, updating to this version will change your hashes.\n\n- Minimum hash length can now be specified\n- Added more randomness to hashes\n- Added unit tests\n- Added example files\n- Changed warnings that can be thrown\n- Renamed `encode/decode` to `encrypt/decrypt`\n- Consistent shuffle does not depend on md5 anymore\n- Speed improvements\n\n**0.1.1**\n\n- Speed improvements\n- Bug fixes\n\n**0.1.0**\n\t\n- First commit\n\n## Contact\n\nFollow me [@IvanAkimov](http://twitter.com/ivanakimov)\n\nOr [http://ivanakimov.com](http://ivanakimov.com)\n\n## License\n\nMIT License. See the `LICENSE` file.",
  "readmeFilename": "README.md",
  "_id": "hashids@0.1.4",
  "_from": "hashids@"
}
